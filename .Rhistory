install.packages("swirl")
library(rmarkdown,markdown,knitr)
library(rmarkdown)
library(markdown)
library(knitr)
install.packages("imputeR")
source("https://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install("impute")
library(tinytex)
tinytex::tlmgr_install("pdfcrop")
library(knitr)
library(rmarkdown)
library(markdown)
vec <- (1:20)
library(datasets)
mtcars
s <- seq(1,10, by = 2); s
s <- seq(1 , by= 2, lenght = 5); s
s <- seq(1 , 10, lenght = 5); s
s <- seq(1 , lenght = 5); s
s <- seq(lenght = 5); s
s <- seq(1,10, length.out = 5)
s
s <- seq(1,10, by=2, length.out = 5)
s2 <- seq(along = s)
s3 <- seq_along(s)
a <- mtcars
View(a)
a$status <- a$cyl %in% c(8,6)
ifelse(a$cyl %in% c(8,6), a$status2 = "good", a$status2 = "bad" )
ifelse(a$cyl %in% c(8,6), a$status2 <- "good", a$status2 <- "bad" )
ifelse(a$cyl %in% c(8,6), a$status2 <- "good", "bad" )
ifelse(a$cyl %in% c(8,6), "good", "bad" )
a$status2 <- ifelse(a$cyl %in% c(8,6), "good", "bad" )
a$hpgroup <- cut(a$hp, breakes = quantile(a$hp))
a$hpgroup <- cut(a$hp, breaks = quantile(a$hp))
quantile(a$hp)
library(Hmisc); a$hpgroup2 <- cut2(a$hp, g = 4)
a$hpgroup2 <- cut2(a$hp, g = 5)
a$hpgroup <- cut(a$hp, breaks = quantile(a$hp, na.rm = T))
a$hpgroup2 <- cut2(a$hp, g = 4)
class(a$hpgroup2)
class(a$hpgroup)
class(a$cyl)
a$cyl2 <- factor(a$cyl)
class(a$cyl2)
levels(a$cyl2)
levels(a$cyl)
a$cyl3 <- as.numeric(a$cyl2)
library(plyr); a2 <- mutate(a, hpgroup3 = cut2(hp,g=4))
View(a2)
round(a$wt, 2)
signif(a$wt, 2)
signif(a$wt, 3)
library(reshape2)
mtcars$carname <- rownames(mtcars)
View(mtcars)
b <- melt(mtcars, id = c("carname","gear",'cyl', measure.vars = c"mpg","hp"))
b <- melt(mtcars, id = c("carname","gear",'cyl', measure.vars = c("mpg","hp")))
View(b)
b2 <- arrange(b, carname)
View(b2)
d <- dcast(b2, cyl ~ variable)
View(d)
d2 <- dcast(b2, cyl ~ variable, mean) ; View(d2)
class(a$cyl2)
tapply(a$cyl,a$cyl3,sum)
l <- split(a$cyl,a$cyl3,sum); sprcar <- lapply(s,sum)
sprcar
unlist(sprcar)
sapply(s,sum)
ddply(a,.(cyl),summarise, sum = sum(cyl))
ddply(a,.(cyl),mutate, sum = sum(cyl))
ddply(a,.(cyl),arrange, sum = sum(cyl))
ddply(a,.(cyl),filter, sum = sum(cyl))
ddply(a,.(cyl),select, sum = sum(cyl))
ddply(a,.(cyl),summarise, sum = sum(cyl))
ddply(a,.(cyl),summarise, mean = mean(cyl))
ddply(a,.(cyl),select, sum = ave(cyl,FUN = sum))
ddply(a,.(cyl),summarise, sum = ave(cyl,FUN = sum))
?merge
authors <- data.frame(
## I(*) : use character columns of names to get sensible sort order
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
View(authors)
authorN <- within(authors, { name <- surname; rm(surname) })
View(authorN)
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
View(books)
m0 <- merge(authorN, books)
View(m0)
m1 <- merge(authors, books, by.x = "surname", by.y = "name")
View(m1)
m2 <- merge(books, authors, by.x = "name", by.y = "surname")
View(m2)
stopifnot(exprs = {
identical(m0, m2[, names(m0)])
as.character(m1[, 1]) == as.character(m2[, 1])
all.equal(m1[, -1], m2[, -1][ names(m1)[-1] ])
identical(dim(merge(m1, m2, by = NULL)),
c(nrow(m1)*nrow(m2), ncol(m1)+ncol(m2)))
})
x <- data.frame(k1 = c(NA,NA,3,4,5), k2 = c(1,NA,NA,4,5), data = 1:5)
y <- data.frame(k1 = c(NA,2,NA,4,5), k2 = c(NA,NA,3,4,5), data = 1:5)
merge(x, y, by = c("k1","k2")) # NA's match
merge(x, y, by = "k1") # NA's match, so 6 rows
merge(x, y, by = "k2", incomparables = NA) # 2 rows
View(x)
View(y)
join(x,y)
head(mtcars)
summary(mtcars)
str(mtcars)
?jiter
?jitter
round(jitter(c(rep(1, 3), rep(1.2, 4), rep(3, 3))), 3)
round((c(rep(1, 3), rep(1.2, 4), rep(3, 3))), 3)
round(jitter(c(rep(1, 3), rep(1.2, 4), rep(3, 3))))
round((c(rep(1, 3), rep(1.2, 4), rep(3, 3))))
(jitter(c(rep(1, 3), rep(1.2, 4), rep(3, 3))))
((c(rep(1, 3), rep(1.2, 4), rep(3, 3))))
â€“ plot(jitter(child, 4)~parent, galton)
plot(jitter(child, 4)~parent, galton)
plot(jitter(child, 4)~parent)
?plot
?histogram
?hist
library(datasets); data(cars); with cars, plot speed, dist))
?datasets
library(help = "datasets")
library(datasets); data(cars); with (cars, (plot speed, dist))
library(datasets); data(cars); with (cars, plot (speed, dist))
library(lattice)
state.region
state
state.x77
?data.frame
state <- data.frame(state.x77, region = state.region); state
names(state.x77)
colnames(state.x77)
colnames(state)
rownames(state.x77)
xyplot(Life Exp ~ Income  | region, data = state , layout= c(4,1))
xyplot(Life.Exp ~ Income  | region, data = state , layout= c(4,1))
xyplot(Life.Exp ~ Income  | region, data = state , layout= c(2,2))
xyplot(Life.Exp ~ Income  | region, data = state , layout= c(1,4))
xyplot(Life.Exp ~ Income  | region, data = state , layout= c(2,2))
hist(airquality$Ozone)
with(airquality, plot(wind, Ozone))
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month <- factor(Month)); boxplot((Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)"))
airquality <- transform(airquality, Month <- factor(Month)); boxplot((Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)"))
airquality <- transform(airquality, Month <- factor(Month)); boxplot((Ozone ~ Month , airquality, xlab = "Month", ylab = "Ozone (ppb)"))
airquality <- transform(airquality, Month <- factor(Month));
boxplot((Ozone ~ Month , airquality, xlab = "Month", ylab = "Ozone (ppb)"))
boxplot(Ozone ~ Month , airquality, xlab = "Month", ylab = "Ozone (ppb)")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind"))
with(airquality, plot(Wind, Ozone)
)
title(main = " Ozone and Wind")
with(subset(airquality, Month == 5), points(Winds, Ozone, col = "green"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "green"))
x <- rnorm(100), hist(x)
x <- rnorm(100); hist(x)
y <- norm(100); plot(x,y)
y <- rnorm(100); plot(x,y)
par(mar = c(2,2,2,2))
plot(x,y)
par(mar = c(4,4,2,2))
plot(x,y)
plot(x,y, pch = 20)
plot(x,y, pch = 19)
plot(x,y, pch = 2)
plot(x,y, pch = 3)
plot(x,y, pch = 4)
example(points)
ls()
list(ls())
rm(ls())
rm(list = ls())
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm)
boxplot(ppm, col = "blue")
abline( h = 12)
hist(ppm, col = "green")
ruq(ppm)
rug(ppm)
low
high
hist(ppm, col = "green", breaks =100)
rug(ppm)
hist(ppm, col = "green")
abline( h = 12, lwd = 2)
abline( v = 12, lwd = 2)
abline( v = median (ppm), col= "magental, wd = 4)
abline( v = median (ppm), col= "magenta", wd = 4)
abline( v = median (ppm), col= "magenta", lwd = 4)
names(pollution)
table (pollution$region)
reg <- table(pollution$region)
reg
barplot(col="wheat",main = "Number of Counties in Each Region" )
barplot(reg,col="wheat",main = "Number of Counties in Each Region" )
boxplot()
boxplot(pm25~region, col = "red")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution, region == "east")
subset(pollution, region == "east")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25, col = "green")
hist(west$pm25, col = "green")
hist(pollution$pm25[region=="west",], col = "green")
hist(pollution$pm25[pollution$region=="west",], col = "green")
hist(pollution[pollution$region=="west",pm25], col = "green")
hist(pollution[pollution$region=="west", pollution$pm25], col = "green")
hist(pollution[pollution$region == "west", pollution$pm25], col = "green")
hist(pollution[region == "west", pm25], col = "green")
hist(pollution[region == "west", pollution$pm25], col = "green")
hist(subset(pollution,region=="west"), col = "green")
hist(subset(pollution,region=="west",ppm25), col = "green")
hist(subset(pollution,region=="west",pm25), col = "green")
hist(subset(pollution, region == "west", select = pm25), col = "green")
hist(as.numeric(subset(pollution, region == "west", select = pm25)), col = "green")
hist(unlist(subset(pollution, region == "west", select = pm25)), col = "green")
Type hist(subset(pollution,region=="west")$pm25, col = "green")
hist(subset(pollution,region=="west")$pm25, col = "green")
plot(latitude,pm25, pollution)
with(pollution, plot(latitude,pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude,pollution$pm25, col =pollution$region )
plot(pollution$latitude, ppm, col = pollution$region)
abline (h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "Eest")
plot(east$latitude, east$pm25, main = "East")
library(swirl)
swirl()
text(car$speed, car$dist, "SWIRL rules!")
text(cars$speed, cars$dist, "SWIRL rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
0
head(state)
exit()
indo()
info()
bye()
swirl()
jead(cars)
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), mean(cars$dist), "SWIRL rules!")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (oob)", col.axis = "blue", col.lab = "red")
(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main = "Ozone and Wind in New York City")
with(airquality ,plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
lenght(par())
length(par())
names(par())
par()$pin
par("fg")
?pchisq
?pch
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may = subset(airquality, Month == 1)
may = subset(airquality, Month == 5)
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, pch = 2 , col = "blue")
points(may$Wind, may$Ozone, pch = 17 , col = "blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind,may$Ozone,col="red",pch=8)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright", pch = c(17,8), col = c("blue", "red"),  legend = c("May","Other Months") )
line(v= mena(airquality$Wind, lty = 2))
aline(v= mena(airquality$Wind, lty = 2))
abline(v= mena(airquality$Wind, lty = 2))
line(v= mean(airquality$Wind, lty = 2))
line(v= mean(airquality$Wind), lty = 2)
abline(v= mean(airquality$Wind), lty = 2)
abline(v= median(airquality$Wind), lty = 2, lwd=2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main ="Ozone and Wind")
plot(airquality$Ozone , airquality$Solar.R, main ="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main ="Ozone and Wind")
plot(airquality$Solar.R , airquality$Ozone, main ="Ozone and Solar Radiation")
plot(airquality$Temp , airquality$Ozone, main ="Ozone and Temperature")
mtext("Ozone and Weather in New York City" , outer = TRUE)
plot(as.numeric(a$Global_active_power))
# check & set Working Directory
if(getwd() != "C:/Users/DELL/OneDrive/Documents/RWD/Exploratory-Data-Analysis-Week1-Project") setwd("~/RWD/Exploratory-Data-Analysis-Week1-Project")
# Download file
if( ! file.exists("Electric power consumption.zip") )
{
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",
"Electric power consumption.zip")
}
# unzip rar file
if( ! file.exists("household_power_consumption.txt")) unzip("Electric power consumption.zip")
# Read the data
library(dplyr)
a <- read.table("household_power_consumption.txt",sep = ";", header= TRUE, stringsAsFactors=FALSE, dec=".")
a <- a[a$Date %in% c("1/2/2007","2/2/2007") ,]
plot(as.numeric(a$Global_active_power))
plot(as.numeric(a$Global_active_power), type ="1")
plot(as.numeric(a$Global_active_power), type="l")
plot(as.numeric(a$Global_active_power), type="l",xlab="", ylab="Global Active Power (kilowatts)")
dt <- strptime(paste(a$Date, a$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
plot(dt, as.numeric(a$Global_active_power), type="l",xlab="", ylab="Global Active Power (kilowatts)")
rm(dt)
plot(a$Sub_metering_1, as.numeric(a$Global_active_power), type="n",xlab="", ylab="Energy Sub Metering")
plot(a$Sub_metering_1, as.numeric(a$Global_active_power), type="l",xlab="", ylab="Energy Sub Metering")
plot(dt, as.numeric(a$Global_active_power), type="l",xlab="", ylab="Global Active Power (kilowatts)"); rm(dt)
dt <- strptime(paste(a$Date, a$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
plot(dt, as.numeric(a$Global_active_power), type="l",xlab="", ylab="Global Active Power (kilowatts)"); rm(dt)
plot(a$Sub_metering_1, as.numeric(a$Global_active_power), type="l",xlab="", ylab="Global Active Power (kilowatts)")
head(a$Sub_metering_1)
# plot 3
dt <- strptime(paste(a$Date, a$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
plot(dt, as.numeric(a$Sub_metering_1), type="n",xlab="", ylab="Energy Sub Metering")
plot(dt, as.numeric(a$Sub_metering_1), type="l",xlab="", ylab="Energy Sub Metering")
line(dt, as.numeric(a$Sub_metering_2), col= "red")
?line
line(dt, as.numeric(a$Sub_metering_2))
lines(dt, as.numeric(a$Sub_metering_2), type="l", col="red")
lines(dt, as.numeric(a$Sub_metering_3), type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
?par
hist(dt,as.numeric(a$Global_reactive_power), xlab = "datetime")
#4
hist(breaks= dt,as.numeric(a$Global_reactive_power), xlab = "datetime")
#4
plot(dt,as.numeric(a$Global_reactive_power), xlab = "datetime")
#4
plot(dt,as.numeric(a$Global_reactive_power), xlab = "datetime", lty=1)
#4
plot(dt,as.numeric(a$Global_reactive_power), xlab = "datetime", lty="l")
#4
plot(dt,as.numeric(a$Global_reactive_power), xlab = "datetime", type="l")
#4
plot(dt,as.numeric(a$Global_reactive_power), xlab = "datetime", type="l", ylab = "Global_reactive_power")
par(mfrow = c(2, 2))
#1
plot(dt, as.numeric(a$Global_active_power), type="l",xlab="", ylab="Global Active Power (kilowatts)")
#2
plot(dt, as.numeric(a$Voltage), type="l",xlab="datetime", ylab="Global Active Power (kilowatts)")
#3
plot(dt, as.numeric(a$Sub_metering_1), type="l",xlab="", ylab="Energy Sub Metering")
lines(dt, as.numeric(a$Sub_metering_2), type="l", col="red")
lines(dt, as.numeric(a$Sub_metering_3), type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
#4
plot(dt,as.numeric(a$Global_reactive_power), xlab = "datetime", type="l", ylab = "Global_reactive_power")
dim(a)
class(dim(a))
identical(dim(a), c(2880, 9))
dim(a) == c(2880, 9)
dim(a) != c(2880, 9)
exists("a")
!exists("a")
source('~/RWD/Exploratory-Data-Analysis-Week1-Project/Exploratory Data Analysis Week1 Project.R')
getwd()
typeof(dim(a))
dim(a)
dim(a) -> c
identical(c, c(2880,9))
identical(c, as.integer(c(2880,9)))
(!identical(cdim(a), as.integer(c(2880,9))))
(!identical(dim(a), as.integer(c(2880,9))))
(identical(dim(a), as.integer(c(2880,9))))
source('~/RWD/Exploratory-Data-Analysis-Week1-Project/Exploratory Data Analysis Week1 Project.R')
source('~/RWD/Exploratory-Data-Analysis-Week1-Project/Exploratory Data Analysis Week1 Project.R')
getwd()
